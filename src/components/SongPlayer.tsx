import { useState, useRef, useEffect } from 'react';
import { Play, Pause, Music, Volume2, VolumeX } from 'lucide-react';

interface SongPlayerProps {
  songUrl: string;
  reportText: string;
}

function SongPlayer({ songUrl, reportText }: SongPlayerProps) {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [volume, setVolume] = useState(1);
  const [isMuted, setIsMuted] = useState(false);
  const audioRef = useRef<HTMLAudioElement | null>(null);

  useEffect(() => {
    const audio = new Audio(songUrl);
    audioRef.current = audio;

    audio.addEventListener('loadedmetadata', () => {
      setDuration(audio.duration);
    });

    audio.addEventListener('timeupdate', () => {
      setCurrentTime(audio.currentTime);
    });

    audio.addEventListener('ended', () => {
      setIsPlaying(false);
      setCurrentTime(0);
    });

    return () => {
      audio.pause();
      audio.remove();
    };
  }, [songUrl]);

  const togglePlay = async () => {
    if (!audioRef.current) return;

    if (isPlaying) {
      audioRef.current.pause();
      setIsPlaying(false);
    } else {
      await audioRef.current.play();
      setIsPlaying(true);
    }
  };

  const handleVolumeChange = (newVolume: number) => {
    setVolume(newVolume);
    if (audioRef.current) {
      audioRef.current.volume = newVolume;
    }
  };

  const toggleMute = () => {
    const newMuted = !isMuted;
    setIsMuted(newMuted);
    if (audioRef.current) {
      audioRef.current.muted = newMuted;
    }
  };

  const handleSeek = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newTime = parseFloat(e.target.value);
    setCurrentTime(newTime);
    if (audioRef.current) {
      audioRef.current.currentTime = newTime;
    }
  };

  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-2xl shadow-xl p-8 mb-8 border-2 border-purple-300">
      <div className="flex items-center gap-3 mb-6">
        <Music className="w-8 h-8 text-purple-600" />
        <h2 className="text-2xl font-bold text-gray-800">
          Crazy Dave's Audio Report
        </h2>
      </div>

      <div className="bg-white rounded-xl p-6 mb-4">
        <p className="text-sm text-gray-600 mb-4">
          Generated by Fish Audio from the scientific analysis:
        </p>
        <div className="bg-purple-50 rounded-lg p-4 max-h-32 overflow-y-auto">
          <p className="text-xs text-gray-700 leading-relaxed">
            {reportText}
          </p>
        </div>
      </div>

      <div className="bg-white rounded-xl p-6">
        <div className="flex items-center gap-4 mb-4">
          <button
            onClick={togglePlay}
            className="w-16 h-16 rounded-full bg-purple-600 hover:bg-purple-700 flex items-center justify-center transition-all transform hover:scale-105 shadow-lg"
          >
            {isPlaying ? (
              <Pause className="w-8 h-8 text-white" />
            ) : (
              <Play className="w-8 h-8 text-white ml-1" />
            )}
          </button>

          <div className="flex-1">
            <div className="flex justify-between text-sm text-gray-600 mb-2">
              <span>{formatTime(currentTime)}</span>
              <span>{formatTime(duration)}</span>
            </div>
            <input
              type="range"
              min="0"
              max={duration || 0}
              value={currentTime}
              onChange={handleSeek}
              className="w-full accent-purple-600"
            />
          </div>
        </div>

        <div className="flex items-center gap-4 pt-4 border-t border-gray-200">
          <button
            onClick={toggleMute}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            {isMuted ? (
              <VolumeX className="w-5 h-5 text-gray-600" />
            ) : (
              <Volume2 className="w-5 h-5 text-gray-600" />
            )}
          </button>

          <div className="flex-1">
            <input
              type="range"
              min="0"
              max="1"
              step="0.01"
              value={volume}
              onChange={(e) => handleVolumeChange(parseFloat(e.target.value))}
              className="w-full accent-purple-600"
            />
          </div>

          <span className="text-sm font-medium text-gray-700 min-w-[3rem]">
            {Math.round(volume * 100)}%
          </span>
        </div>
      </div>

      <div className="mt-4 bg-purple-100 border border-purple-200 rounded-lg p-3">
        <p className="text-xs text-purple-800">
          ðŸŽµ This audio was generated using Fish Audio's advanced text-to-speech technology,
          transforming Crazy Dave's scientific analysis into spoken word.
        </p>
      </div>
    </div>
  );
}

export default SongPlayer;
